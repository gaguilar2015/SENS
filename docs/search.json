[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sample Data Analysis",
    "section": "",
    "text": "The Standardised Expanded Nutrition Survey (SENS) is a health and nutrition survey by the United Nation’s High Commission for Refugees (UNHCR), aimed at improving nutrition among refugee populations by gathering quality data to develop timely policies and interventions.\nSurvey Solutions is a free software developed by the World Bank for designing and managing surveys, censuses and data collection activities. It supports many modes of collection such as CAPI, CAWI and mixed-modes.\nThis document provides a brief guide to preparing SENS data for data analysis when the data-source is Survey Solutions. It assumes that the reader is familiar with Survey Solutions and has implemented (or will implement) a SENS activity using the standard Survey Solutions SENS template (will be linked when public).\nThe statistical software that will be used in this guide is R, an open-source language for graphical and statistical computing. All examples and code will be written in R, with the assistance of some key packages. All code was developed and tested using the R version 4.1.1. Please ensure that your local R installation is version 4 or higher.\nNote: In its current form, this guide assumes no particular survey design and thus includes no design elements such as survey weights, strata, clusters, etc. However, the survey R package may be used in order to define and incorporate these elements into the analysis.\nIn addition, this guide will make heavy use of the Tidyverse, which is a set of packages and style-guidelines for data analysis in R. The two main Tidyverse packages used in this guide are dplyr, for data wrangling, and ggplot2, for plots and graphs. The ‘R Code: Preparation’ section contains more information about these and other R packages used in this guide."
  },
  {
    "objectID": "index.html#structure-of-exported-data",
    "href": "index.html#structure-of-exported-data",
    "title": "Sample Data Analysis",
    "section": "Structure of Exported Data",
    "text": "Structure of Exported Data\nThe first step is exporting and downloading the survey data from Survey Solutions. The details of exporting data will not be discussed here but documentation can be found in the official Survey Solutions documentation site.\nThe image below displays all survey and system-generated files that are extracted from the Survey Solutions export.\n\nFor this guide, the files have been exported and downloaded in SPSS format. The main survey files are:\n\nsens.sav - the base file containing household-level elements. The modules included at this level are\n\nDemography (M. 1)\nFood Security (M. 5)\nMosquito Net (M. 6)\nWASH (M. 7)\n\nHHMEMBERS.sav - the individual-level file containing individual-level elements. These include child and woman questionnaire data and modules:\n\nAnthropometry & Health (M. 2) - Child and Woman\nAnaemia (M. 3) - Child and Woman\nIYCF (m. 4) - Child.\n\nBEDNETS.sav - information on bed nets from the Mosquito Nets module.\nWATERCONTAINERS.sav - information on household water storage containers from the WASH module.\n\nAdditionally, some automatically generated metadata files are included. For information on these system-generated Survey Solutions files, please refer to the official documentation."
  },
  {
    "objectID": "index.html#r-code-preparation",
    "href": "index.html#r-code-preparation",
    "title": "Survey Solutions and UNHCR’s SENS",
    "section": "R Code: Preparation",
    "text": "R Code: Preparation\n\nInstalling and loading packages\nSeveral very useful R packages will be used in this guide. These should be installed (if not done so already) and then loaded.\nAdditionally, some objects that will later help in theming plots and graphs are defined. For more information on colors and theming in R and ggplot2, please see here.\n\n#To install the packages used in this guide, uncomment and run the lines below.\n#install.packages(haven)      # For importing SPSS files into R\n#install.packages(janitor)    # For cleaning/housekeeping datasets\n#install.packages(dplyr)      # For wrangling and summarising datasets\n#install.packages(tidyr)      # For reshaping datasets\n#install.packages(ggplot2)    # For plotting and visualization\n#install.packages(questionr)  # For easy frequency and descrptive tables\n#install.packages(forcats)  # For working with 'factor' or categorical data\n\nlibrary(haven)\nlibrary(janitor)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(questionr)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# theme colors for plots\nprimaryColor <- 'turquoise4'\nsecondaryColor <- 'wheat3'\n\n# ggplot2 theme object for styling plots\nplotTheme <-   theme_minimal() +\n  theme(\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    text = element_text(size = 16),\n    legend.position = 'bottom'\n  )\n\n\n\nImporting, merging and preparing survey files\nIt is assumed that you have downloaded and extracted the SENS survey files into a folder called SENS_FILES in your local working directory. These files can now be worked with. What follows in this subsection is some basic preparation of the survey data to facilitate further analysis.\n\n# 1. import files from local directory, save as R data frames\nsens_hh <- read_sav('./SENS_FILES/sens.sav')\nsens_ind <- read_sav('./SENS_FILES/HHMEMBERS.sav')\n\n# 2. add household-size categorical variable\nsens_hh <- mutate(sens_hh, \n                  HHSIZE_CAT = case_when(\n                    HHSIZE <= 4 ~ '1-4',\n                    HHSIZE <= 6 ~ '5-6',\n                    HHSIZE <= 9 ~ '7-9',\n                    HHSIZE >= 10 ~ '>= 10')\n                  )\n\n# 3. Create AGEGROUP variable in the individual-level data frame\n\n# 3a. define the age group labels at 5 year intervals\ngroupLabels <- c(\n  paste(seq(0, 90, by = 5), seq(0 + 5 - 1, 95 - 1, by = 5), sep = \"-\"),\n  paste('95+')\n  )\n\n# 3b. create the AGEGROUP variable by 5 year intervals and apply group labels\nsens_ind$AGEGROUP <- cut(sens_ind$HHMAGE, breaks = c(seq(0, 95, by = 5), Inf),\n                          labels = groupLabels, \n                          right = FALSE)\n\n# 3c. ensure correct ordering of the age group 'levels'\nsens_ind$AGEGROUP <- fct_relevel(sens_ind$AGEGROUP, \n                                 '0-4', \n                                 '5-9')\n\n# 4. create a recoded SEX variable\nsens_ind$SEX <- ifelse(sens_ind$HHMSEX == 1, 'Male', 'Female')\n\n# 5. merge household and individual level data frames\nsens_df <- left_join(sens_hh, sens_ind, by = 'interview__key')\n\nIn the above code, the following things take place:\n\nThe survey base/household-level file and the individual-level file are imported using the read_sav function from the haven packaged and saved in R objects as data frames.\nA derived categorical variable of household size is created..\nA derived categorical (ordered) variable of individual age groups is created and formatted, ensuring that the order of the age group categories follows from smallest to largest.\nA recoded SEX variable is created to facilitate some later analysis.\nThe household and individual level data frames are merged*, using dplyr’s left_join, into a single data frame named sens_df.\n\nThe joining variable is interview__key, which is a key generated by Survey Solutions to uniquely identify interview cases. In this particular context, the interview__key is unique at the household level, meaning that each survey household can be distinctly identified by its interview__key.\n\n\n*For more information on merges and joins with dplyr, see here.\nFollowing, we create a simple function for displaying nicely formatted tables using the kableExtra package. This function takes as parameters the data frame (df) to create the table from and the caption (capt) to display.\n\n# format a data frame using the {kableExtra} package\nformattedTable <- function(df, capt){\n  df |> \n    kbl(caption = capt) |> \n    kable_styling(font_size = 14, full_width = F,\n                  bootstrap_options = c(\"hover\", \"condensed\"))\n}"
  },
  {
    "objectID": "index.html#r-code-analysis-demo",
    "href": "index.html#r-code-analysis-demo",
    "title": "Survey Solutions and UNHCR’s SENS",
    "section": "R Code: Analysis Demo",
    "text": "R Code: Analysis Demo\n\nModule 1: Demography\n\nHousehold Response\nResponse rates are calculated from the consent (MDCCONST) variable. The function freq from the questionr package is used to produce easy frequency tables with labelled values.\nThe result is displayed with the help of our formattedTable function.\n\n# 1. derive frequencies\nresponse_freq <- freq(sens_hh[\"MDCCONST\"]) \n\n# 2. output the results in a formatted table\nformattedTable(response_freq, 'Household Consent')\n\n\nHousehold Consent\n \n  \n      \n    n \n    % \n    val% \n  \n \n\n  \n    [1] Yes \n    7 \n    63.6 \n    63.6 \n  \n  \n    [2] No \n    2 \n    18.2 \n    18.2 \n  \n  \n    [3] Absent \n    2 \n    18.2 \n    18.2 \n  \n  \n    [-999999999] missing \n    0 \n    0.0 \n    0.0 \n  \n\n\n\n\n\n\n\nHousehold Totals\nWe can also display some aggregated summaries of the surveyed population. We will call these ‘Household Totals’ and they are derived by aggregating and summing the demographic summary variables available from the Demography module. We recall that these variables were automatically calculated by Survey Solutions for each interviewed household.\n\n# 1. summarise survey data on household totals\nsurvey_totals <- summarise(sens_hh, \n                           `Total Surveyed` = sum(HHSIZE, na.rm = T),\n                           `Total U2` = sum(TOTU2, na.rm = T),\n                           `Total U5` = sum(TOTU5, na.rm = T),\n                           `Total 5-14` = sum(TOT514, na.rm = T),\n                           `Total 15-64` = sum(TOT1564, na.rm = T),\n                           `Total 65+` = sum(TOT65OLD, na.rm = T),\n                           `Total Pregnant` = sum(TOTPREG, na.rm = T))\n\n# 2. pivot the table from wide to long format\nsurvey_totals <- pivot_longer(survey_totals, \n                              cols = everything(),\n                              names_to = \"Household Totals\",\n                              values_to = \"Result\") \n\n# 3. output the results in a formatted table\nformattedTable(survey_totals, 'Household Totals')\n\n\nHousehold Totals\n \n  \n    Household Totals \n    Result \n  \n \n\n  \n    Total Surveyed \n    44 \n  \n  \n    Total U2 \n    9 \n  \n  \n    Total U5 \n    17 \n  \n  \n    Total 5-14 \n    7 \n  \n  \n    Total 15-64 \n    20 \n  \n  \n    Total 65+ \n    0 \n  \n  \n    Total Pregnant \n    6 \n  \n\n\n\n\n\n\n\nHousehold Size\nUsing the questionr package, it is also easy to produce some basic frequency tables, such as household size categories using the HHSIZE_CAT variable created earlier.\n\nhh_sizecat <- questionr::freq(sens_hh$HHSIZE_CAT)\nformattedTable(hh_sizecat, 'Household Size')\n\n\nHousehold Size\n \n  \n      \n    n \n    % \n    val% \n  \n \n\n  \n    >= 10 \n    2 \n    18.2 \n    28.6 \n  \n  \n    1-4 \n    3 \n    27.3 \n    42.9 \n  \n  \n    5-6 \n    2 \n    18.2 \n    28.6 \n  \n  \n    NA \n    4 \n    36.4 \n    NA \n  \n\n\n\n\n\nFor reporting, it might be useful to create some graphs and visuals of demographic data. Below, we use the ggplot2 package to create a simple bar graph of household size frequencies.\nFor more information on ggplot2 and its syntax, refer to the Data Visualization chapter in R For Data Science (Wickham, 2016).\n\nggplot(data = sens_hh, aes(HHSIZE_CAT)) +\n  geom_bar(fill = primaryColor) + \n  labs(x = 'Household Size', y = 'Count', title = 'Frequency of household size') +\n  plotTheme\n\n\n\n\n\n\n\n\n\n\nPopulation Pyramid\nWe can also create a typical population pyramid. To do this, we first derive a data frame that groups data by sex and age group. Because of how ggplot2 renders the data, we also make the male population figures negative, so that the male pyramid bars go to side opposite of the female pyramid bars.\nThereafter, a somewhat complex ggplot function call is made to create the pyramid. Essentially, we are modifying a bar graph and applying some tricks to create the pyramid.\n\n# 1. derive age group populations by sex\nagegroups <- sens_ind |> \n  group_by(SEX, AGEGROUP) |> \n  summarise(POPULATION = n(), .groups = 'drop') |> \n  mutate(POPULATION = ifelse(SEX == 'Male', POPULATION * -1, POPULATION))\n\n# 2. create population pyramid\nggplot(data = agegroups, aes(x = AGEGROUP, y = POPULATION, fill = SEX)) +\n  geom_bar(stat='identity') + \n  scale_fill_manual(values=c(primaryColor, secondaryColor)) +\n  scale_y_continuous(labels = ~ ifelse(.x < 0, .x * -1, .x)) +\n  coord_flip() +    \n  labs(title = 'Population Pyramid') +\n  guides(fill = guide_legend(reverse = T)) +\n  plotTheme"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#module-1-demography",
    "href": "index.html#module-1-demography",
    "title": "Sample Data Analysis",
    "section": "Module 1: Demography",
    "text": "Module 1: Demography\n\nHousehold Response\nResponse rates are calculated from the consent (MDCCONST) variable. The function freq from the questionr package is used to produce easy frequency tables with labelled values.\nThe result is displayed with the help of our formattedTable function.\n\n# 1. derive frequencies\nresponse_freq <- freq(sens_hh[\"MDCCONST\"]) \n\n# 2. output the results in a formatted table\nformattedTable(response_freq, 'Household Consent')\n\n\nHousehold Consent\n \n  \n      \n    n \n    % \n    val% \n  \n \n\n  \n    [1] Yes \n    7 \n    63.6 \n    63.6 \n  \n  \n    [2] No \n    2 \n    18.2 \n    18.2 \n  \n  \n    [3] Absent \n    2 \n    18.2 \n    18.2 \n  \n  \n    [-999999999] missing \n    0 \n    0.0 \n    0.0 \n  \n\n\n\n\n\n\n\nHousehold Totals\nWe can also display some aggregated summaries of the surveyed population. We will call these ‘Household Totals’ and they are derived by aggregating and summing the demographic summary variables available from the Demography module. We recall that these variables were automatically calculated by Survey Solutions for each interviewed household.\n\n# 1. summarise survey data on household totals\nsurvey_totals <- summarise(sens_hh, \n                           `Total Surveyed` = sum(HHSIZE, na.rm = T),\n                           `Total U2` = sum(TOTU2, na.rm = T),\n                           `Total U5` = sum(TOTU5, na.rm = T),\n                           `Total 5-14` = sum(TOT514, na.rm = T),\n                           `Total 15-64` = sum(TOT1564, na.rm = T),\n                           `Total 65+` = sum(TOT65OLD, na.rm = T),\n                           `Total Pregnant` = sum(TOTPREG, na.rm = T))\n\n# 2. pivot the table from wide to long format\nsurvey_totals <- pivot_longer(survey_totals, \n                              cols = everything(),\n                              names_to = \"Household Totals\",\n                              values_to = \"Result\") \n\n# 3. output the results in a formatted table\nformattedTable(survey_totals, 'Household Totals')\n\n\nHousehold Totals\n \n  \n    Household Totals \n    Result \n  \n \n\n  \n    Total Surveyed \n    44 \n  \n  \n    Total U2 \n    9 \n  \n  \n    Total U5 \n    17 \n  \n  \n    Total 5-14 \n    7 \n  \n  \n    Total 15-64 \n    20 \n  \n  \n    Total 65+ \n    0 \n  \n  \n    Total Pregnant \n    6 \n  \n\n\n\n\n\n\n\nHousehold Size\nUsing the questionr package, it is also easy to produce some basic frequency tables, such as household size categories using the HHSIZE_CAT variable created earlier.\n\nhh_sizecat <- questionr::freq(sens_hh$HHSIZE_CAT)\nformattedTable(hh_sizecat, 'Household Size')\n\n\nHousehold Size\n \n  \n      \n    n \n    % \n    val% \n  \n \n\n  \n    >= 10 \n    2 \n    18.2 \n    28.6 \n  \n  \n    1-4 \n    3 \n    27.3 \n    42.9 \n  \n  \n    5-6 \n    2 \n    18.2 \n    28.6 \n  \n  \n    NA \n    4 \n    36.4 \n    NA \n  \n\n\n\n\n\nFor reporting, it might be useful to create some graphs and visuals of demographic data. Below, we use the ggplot2 package to create a simple bar graph of household size frequencies.\nFor more information on ggplot2 and its syntax, refer to the Data Visualization chapter in R For Data Science (Wickham, 2016).\n\n# only keep valid respondent households\nhouseholds <- filter(sens_hh, MDCCONST == 1)\n\n# bar chart of household size frequencies\nggplot(data = households, aes(HHSIZE_CAT)) +\n  geom_bar(fill = primaryColor) + \n  labs(x = 'Household Size', y = 'Count', title = 'Frequency of household size') +\n  plotTheme\n\n\n\n\n\n\n\n\n\n\nPopulation Pyramid\nWe can also create a typical population pyramid. To do this, we first derive a data frame that groups data by sex and age group. Because of how ggplot2 renders the data, we also make the male population figures negative, so that the male pyramid bars go to side opposite of the female pyramid bars.\nThereafter, a somewhat complex ggplot function call is made to create the pyramid. Essentially, we are modifying a bar graph and applying some tricks to create the pyramid.\n\n# 1. derive age group populations by sex\nagegroups <- sens_df |> \n  group_by(SEX, AGEGROUP) |> \n  summarise(POPULATION = n(), .groups = 'drop') |> \n  mutate(POPULATION = ifelse(SEX == 'Male', POPULATION * -1, POPULATION))\n\n# 2. create population pyramid\nggplot(data = agegroups, aes(x = AGEGROUP, y = POPULATION, fill = SEX)) +\n  geom_bar(stat='identity') + \n  scale_fill_manual(values=c(primaryColor, secondaryColor)) +\n  scale_y_continuous(labels = ~ ifelse(.x < 0, .x * -1, .x)) +\n  coord_flip() +    \n  labs(title = 'Population Pyramid') +\n  guides(fill = guide_legend(reverse = T)) +\n  plotTheme \n\nWarning: Removed 1 rows containing missing values (position_stack)."
  },
  {
    "objectID": "index.html#preparation",
    "href": "index.html#preparation",
    "title": "Sample Data Analysis",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nInstalling and loading packages\nSeveral very useful R packages will be used in this guide. These should be installed (if not done so already) and then loaded.\n\n#To install the packages used in this guide, uncomment and run the lines below.\n#install.packages(haven)      # For importing SPSS files into R\n#install.packages(janitor)    # For cleaning/housekeeping datasets\n#install.packages(dplyr)      # For wrangling and summarising datasets\n#install.packages(tidyr)      # For reshaping datasets\n#install.packages(ggplot2)    # For plotting and visualization\n#install.packages(questionr)  # For easy frequency and descrptive tables\n#install.packages(forcats)    # For working with 'factor' or categorical data\n#install.packages(kableExtra) # For formatting pretty tables\n\nlibrary(haven)\nlibrary(janitor)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(questionr)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(kableExtra)\n\nAdditionally, some objects that will later help in theming plots and graphs are defined. All plots will be created using the ggplot2 package. it is not important to understand the below code, but for more information on colors and theming in R and ggplot2, please see here.\n\n# theme colors for plots\nprimaryColor <- 'turquoise4'\nsecondaryColor <- 'wheat3'\n\n# ggplot2 theme object for styling plots\nplotTheme <-   theme_minimal() +\n  theme(\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    text = element_text(size = 16),\n    legend.position = 'bottom',\n    title = element_text(size = 13)\n  )\n\n# An overlay of percent-label text on some plots\napplyPercentLabels <- geom_text(\n    aes(y=..count../tapply(..count.., ..x.. ,sum)[..x..],\n        label=paste0(round((..count../tapply(..count.., ..x.. ,sum)[..x..]), \n                           3) * 100, '%')),\n    size = 4, \n    color = 'white',\n    stat=\"count\", \n    position=position_fill(0.5), \n    vjust=-0.5, \n    hjust = 0.4)\n\n\n\nImporting, merging and preparing survey files\nIt is assumed that you have downloaded and extracted the SENS survey files into a folder called SENS_FILES in your local working directory. These files can now be worked with. What follows in this subsection is some basic preparation of the survey data to facilitate further analysis.\n\n# 1. import files from local directory, save as R data frames\nsens_hh <- read_sav('./SENS_FILES/sens.sav')\nsens_ind <- read_sav('./SENS_FILES/HHMEMBERS.sav')\n\n# 2. merge household and individual level data frames\nsens_df <- left_join(sens_hh, sens_ind, by = 'interview__key')\n\nIn the above code, two things take place:\n\nThe survey base/household-level file and the individual-level file are imported using the read_sav function from the haven packaged and saved in R objects as data frames.\nThe household and individual level data frames are merged*, using dplyr’s left_join function, into a single data frame named sens_df.\n\nThe joining variable is interview__key, which is a key generated by Survey Solutions to uniquely identify interview cases. In this particular context, the interview__key is unique at the household level, meaning that each survey household can be distinctly identified by its interview__key. This key is present in all survey files (and other exported files), making it a convenient merging variable. Individuals from the sens_ind roster will be merged with the household file, creating a dataset that contains all surveyed individuals along with household-level data.\n\n\n*For more information on merges and joins with dplyr, see here.\nBelow, we create some important derived variables that will be used throughout the analysis.\n\n# 1. add household-size categorical variable\nsens_hh <- mutate(sens_hh, \n                  HHSIZE_CAT = case_when(\n                    HHSIZE <= 4 ~ '1-4',\n                    HHSIZE <= 6 ~ '5-6',\n                    HHSIZE <= 9 ~ '7-9',\n                    HHSIZE >= 10 ~ '>= 10')\n                  )\n\n# 2. Create AGEGROUP variable in the individual-level data frame\n\n# 2a. define the age group labels at 5 year intervals\ngroupLabels <- c(\n  paste(seq(0, 90, by = 5), seq(0 + 5 - 1, 95 - 1, by = 5), sep = \"-\"),\n  paste('95+')\n  )\n\n# 2b. create the AGEGROUP variable by 5 year intervals and apply group labels\nsens_df$AGEGROUP <- cut(sens_df$HHMAGE, breaks = c(seq(0, 95, by = 5), Inf),\n                          labels = groupLabels, \n                          right = FALSE)\n\n# 2c. ensure correct ordering of the age group 'levels'\nsens_df$AGEGROUP <- fct_relevel(sens_df$AGEGROUP, \n                                 '0-4', \n                                 '5-9')\n\n\n# 3. create CHILD age group variables using a different and, for\n# this purpose, more convenient approach\nsens_df <- mutate(sens_df,\n  CHAGEGROUP = case_when(\n    MONTHSX %in% 48:59 ~ '48-59',\n    MONTHSX %in% 36:47 ~ '36-47',\n    MONTHSX %in% 24:35 ~ '24-35', \n    MONTHSX %in% 12:23 ~ '12-23',\n    MONTHSX %in% 6:11 ~ '6-11',\n    MONTHSX %in% 0:5 ~ '0-5')\n)\n\nsens_df$CHAGEGROUP <- fct_relevel(sens_df$CHAGEGROUP, \n                                 '0-5', \n                                 '6-11')\n# 4. create a recoded SEX variable\nsens_df$SEX <- ifelse(sens_df$HHMSEX == 1, 'Male', 'Female')\n\nIn the code above, we have derived the following important variables:\n\nA derived categorical variable of household size.\nA derived categorical (ordered) variable of individual age groups, in intervals of 5 years.\nA derived categorical (ordered) variable of child age groups, in varying month intervals.\nA recoded SEX variable using text labels.\n\n\n\nHousekeeping and Preliminary Exploratory Analysis\nThe SENS documentation recommends reviewing the completeness and integrity of some key variables. Below, we run frequency checks on the three main consent variables.\n\n# Frequency on overall HOUSEHOLD consent variable\nfreq(sens_hh['MDCCONST'])\n\n                     n    % val%\n[1] Yes              7 63.6 63.6\n[2] No               2 18.2 18.2\n[3] Absent           2 18.2 18.2\n[-999999999] missing 0  0.0  0.0\n\n\n\n# Frequency on overall CHILD consent variable\nfreq(sens_ind['CHCONST'])\n\n                      n    % val%\n[1] Yes              17 38.6 94.4\n[2] No                1  2.3  5.6\n[-999999999] missing  0  0.0  0.0\nNA                   26 59.1   NA\n\n\n\n# Frequency on overall WOMAN consent variable\nfreq(sens_ind['WMCONST'])\n\n                      n    % val%\n[1] Yes               7 15.9 63.6\n[2] No                2  4.5 18.2\n[8] Absent            2  4.5 18.2\n[-999999999] missing  0  0.0  0.0\nNA                   33 75.0   NA\n\n\nAnalysing the output of the above frequencies, we can observe a few peculiarities worth mentioning:\n\nSystem-missing data - These data are coded as NA by R. These are data that are missing because the software determines that they are not applicable. For example all questions that are disabled in Survey Solutions are questions that should not be asked and thus the data is missing.\nUser-missing data - These data are coded as -999999999 by Survey Solutions. These are data intentionally or unintentionally left blank by the data-capturer. Survey Solutions codes these as -999999999 with the label ‘missing’. These correspond to questions which the software determined that they should have been asked, but no response was recorded.\n\nSome users might want to code user-missing data under the same category as options such as “Don’t know” or “Not applicable”. This depends on the particular analysis plan.\n\nOther labelled data - We can observe that for other valid data, Survey Solutions produces values and labels, which is very useful during analysis.\n\nFinally, we run a basic histogram below to get a sense of the age data on household members (HHMAGE). This can be useful for detecting possible outliers and for observing general trends.\n\nggplot(sens_df, aes(x = HHMAGE)) +\n  geom_histogram(fill = primaryColor) +\n  scale_x_continuous(labels = seq(0, 95, 5), breaks = seq(0, 95, 5)) \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 4 rows containing non-finite values (stat_bin).\n\n\n\n\n\n\n\nAesthetics\nFollowing, we create a few simple functions that will facilitating formatting and displaying data.\n\n# 1. function that formats a data frame using the {kableExtra} package\nformattedTable <- function(df, capt){\n  df |> \n    kbl(caption = capt) |> \n    kable_styling(font_size = 14, full_width = F,\n                  bootstrap_options = c(\"hover\", \"condensed\"))\n}\n\n# 2. function that formats a decimal value into a percent value\nformatPercent <- function(x){\n  paste0(round(x, 2) * 100, '%')\n}"
  },
  {
    "objectID": "index.html#module-2-anthropometry-and-health",
    "href": "index.html#module-2-anthropometry-and-health",
    "title": "Sample Data Analysis",
    "section": "Module 2: Anthropometry and Health",
    "text": "Module 2: Anthropometry and Health\nThe Anthropmetry and Health module is the first child-level module, and thus captures some demographic child data. This guide assumes that the IYCF module is included in the SENS survey and therefore the child age range for eligibility is 0-59 months.\nIn the code and table below, we first calculate the child (0-59 months) response rates.\n\n# 1. summarise data by response based on the MDCCONST variable\n# note: modify 'Target' to your local target # for children to sample\nchResponse <- sens_df |> \n  summarise(\n    Target = 120,\n    `Total Surveyed` = sum(CHCONST == 1, na.rm = TRUE),\n    `% of Target` = paste0(round((`Total Surveyed`/Target) * 100,2), '%'),\n    `Non-Responses` = sum(CHCONST %in% c(2,8), na.rm = TRUE),\n    `Non-Reponse rate (%)` = paste0(round(sum(CHCONST != 1, na.rm = T)/\n                                            sum(!is.na(CHCONST), na.rm = T), 3) * 100, '%')\n  )\n\n# 2. output the results in a formatted table\nformattedTable(chResponse, \"Children 0-59 Months\")\n\n\nChildren 0-59 Months\n \n  \n    Target \n    Total Surveyed \n    % of Target \n    Non-Responses \n    Non-Reponse rate (%) \n  \n \n\n  \n    120 \n    17 \n    14.17% \n    1 \n    5.6% \n  \n\n\n\n\n\nNext, we can create an age and sex distribution of the surveyed children, including the sex ratio (girl:boy).\n\n# 1. derive frequency table with totals, using the {janitor} package\nchAgeSex <- tabyl(dat = sens_df, CHAGEGROUP, SEX, show_na = F) |> \n  adorn_totals(c('row'))\n\n# 2. add percentage columns, format and rearrange columns\nchAgeSex <- chAgeSex |> \n  mutate(Total = Female + Male,\n         `%` = formatPercent(Female/Total),\n         `% ` = formatPercent(Male/Total),\n         Ratio = round(Female/Male, 2)) |> \n  select(CHAGEGROUP, `Count` = Female, `%`, `Count ` = Male, `% `, Total, Ratio)\n\n#3. output results to a formatted table, grouping some columns by sex\nformattedTable(chAgeSex, 'Child Age and Sex Distribution') |> \n  add_header_above(c(\" \" = 1, \"Female\" = 2, \"Male\" = 2, \" \" = 2))\n\n\nChild Age and Sex Distribution\n \n\n\nFemale\nMale\n\n\n  \n    CHAGEGROUP \n    Count \n    % \n    Count  \n    %  \n    Total \n    Ratio \n  \n \n\n  \n    0-5 \n    3 \n    75% \n    1 \n    25% \n    4 \n    3 \n  \n  \n    6-11 \n    2 \n    67% \n    1 \n    33% \n    3 \n    2 \n  \n  \n    12-23 \n    0 \n    0% \n    2 \n    100% \n    2 \n    0 \n  \n  \n    24-35 \n    0 \n    0% \n    2 \n    100% \n    2 \n    0 \n  \n  \n    36-47 \n    2 \n    67% \n    1 \n    33% \n    3 \n    2 \n  \n  \n    48-59 \n    2 \n    50% \n    2 \n    50% \n    4 \n    1 \n  \n  \n    Total \n    9 \n    50% \n    9 \n    50% \n    18 \n    1 \n  \n\n\n\n\n\nWe do wasting now.\n\nsens_df$WFZ <- as.double(sens_df$WFZ)\n\nsens_df <- sens_df |> \n  mutate(\n    WASTING = case_when(\n      WFZ >= -2 ~ 'No wasting',\n      WFZ >= -3 ~ 'Moderate wasting',\n      WFZ < -3 ~ 'Severe wasting'\n    )\n  )\n\nsens_df$WASTING <- fct_relevel(sens_df$WASTING, \n                                'No wasting',\n                                'Moderate wasting',\n                                'Severe wasting')\n\nggplot(data = filter(sens_df, !is.na(WASTING)),aes(x = CHAGEGROUP, fill = WASTING)) +\n  geom_bar(position = 'fill') +\n  applyPercentLabels +\n  labs(x = 'Age Group', y = 'Proportion', \n       title = 'Prevalence of wasting by age in children 6-59 months') +\n  scale_fill_manual(values = c('aquamarine3', 'salmon', 'firebrick1')) +\n  guides(fill = guide_legend(reverse = T)) +\n  plotTheme"
  }
]