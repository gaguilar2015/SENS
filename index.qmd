---
title: "Survey Solutions and UNHCR's SENS"
subtitle: "Sample data analysis"
author: "Gian Aguilar"
date: "4/29/2022"
editor: visual
fontsize: '12'
---

```{=html}
<style type="text/css">

@import url('https://fonts.googleapis.com/css2?family=Fira+Code&display=swap');

code.r{
  font-size: 13px;
  font-family: 'Fira Code', monospace;
}
pre {
  font-size: 13px;
  font-family: 'Fira Code', monospace;
}
</style>
```
```{r}
#| label: load-packages
#| include: false
#| warning: false

# THE FIRST TIME RUNNING THIS SCRIPT, UNCOMMENT THE BELOW COMMANDS AND RUN THEM
# install.packages("devtools")
#devtools::install_github("arthur-shaw/susoapi")
#install.packages('rio')
#install.packages('dplyr')
#install.packages('haven')
#install.packages('janitor')

# Load the necessary libraries
library(susoapi)
library(dplyr)
library(tidyr)
library(haven)
library(janitor)
library(httr)
library(questionr)
library(kableExtra)
library(ggplot2)
library(palmerpenguins)

#' zip file names
ZIP_NAME <- 'SENS.zip'
FOLDER_NAME <- 'SENS_FILES'

#' File names
BASE_FILE <- 'sens_suso'
MEMBERS <- 'CHILD'

#' In production, most of the below would be stored in environmental variables, for security reasons

#' Survey Solutions API constants
SERVER_URL <- 'http://surveys.belizeanalytics.com/'
WS <- 'sens'
QID <- '7dae055421cb4b7bbd136ae492a044d8$8'
FILE_TYPE <- 'SPSS'

#' API credentials
API_USER <- Sys.getenv('SS_API_USER')
API_PWD <- Sys.getenv('SS_API_PWD')
```

```{r}
#| echo: false
#| include: false
#| eval: false

set_credentials(
  server = SERVER_URL,
  user = API_USER,
  password = API_PWD
)

export_data <- function(){
  
    start_export(
    qnr_id = QID,
    export_type = FILE_TYPE,
    interview_status = "All",
    include_meta = TRUE,
    workspace = WS
  ) -> started_job_id
  
  # get export status details and run a while loop until job is completed
  exstat <- get_export_job_details(job_id = started_job_id, workspace = WS)
  
  while(exstat$ExportStatus != "Completed"){
    exstat <- get_export_job_details(job_id = started_job_id, workspace = WS)
  }
  
  reqUrl <- paste0(SERVER_URL, 'sens/api/v2/export/', exstat$JobId, "/file")
  response <- GET(reqUrl, authenticate(API_USER, API_PWD))
  files <- content(response, "raw")
  
  #3. Open a file connection to unzip downloaded files and save into local directory
  filecon <- file(file.path('./', ZIP_NAME), "wb")
  writeBin(files, filecon)
  close(filecon)
  
  unzip(paste0('./', ZIP_NAME),
        exdir = paste0('./', FOLDER_NAME))
}
export_data()
```

## Introduction

The [Standardised Expanded Nutrition Survey](https://sens.unhcr.org) (SENS) is a health and nutrition survey by the United Nation's High Commission for Refugees (UNHCR), aimed at improving nutrition among refugee populations by gathering quality data to develop timely policies and interventions.

This document provides a brief guide to preparing SENS data for data analysis when the data-source is Survey Solutions. It assumes that the reader is familiar with Survey Solutions and has implemented (or will implement) a SENS activity using the standard Survey Solutions SENS template *(will be linked when public).*

The statistical software that will be used in this guide is R, an open-source language for graphical and statistical computing. All examples and code will be written in R, with the assistance of some key packages. All code was developed and tested using the R **version 4.1.1**. Please ensure that your local R installation is version 4 or higher.

In addition, this guide will make heavy use of the [*Tidyverse*](https://www.tidyverse.org/packages/), which is a set of packages and style-guidelines for data analysis in R. The two main Tidyverse packages used in this guide are `dplyr`, for data wrangling, and `ggplot2`, for plots and graphs. The 'R Code: Preparation' section contains more information about these and other R packages used in this guide.

## Structure of Exported Data

The first step is exporting and downloading the survey data from Survey Solutions. The details of exporting data will not be discussed here but documentation can be found in the [official Survey Solutions documentation site](https://docs.mysurvey.solutions/headquarters/export/).

The image below displays all survey and system-generated files that are extracted from the Survey Solutions export.

![](images/sens_files.png){width="300"}

For this guide, the files have been exported in SPSS format. The main survey files are:

-   sens_suso.sav - the base file containing all household-level items. The modules included at this level are
    -   Demography (M. 1)
    -   Food Security (M. 5)
    -   Mosquito Net (M. 6)
    -   WASH (M. 7)
-   HHMEMBERS.sav - the individual-level file containing individual-level items. These include child and woman questionnaire data and modules:
    -   Anthropometry & Health (M. 2) - Child and Woman
    -   Anaemia (M. 3) - Child and Woman
    -   IYCF (m. 4) - Child.
-   BEDNETS.sav - information on bed nets from the Mosquito Nets module.
-   WATERCONTAINERS.sav - information on household water storage containers from the WASH module.

For information on the system-generated Survey Solutions file, [please refer to the official documentation](https://docs.mysurvey.solutions/headquarters/export/system-generated---export-file-anatomy/).

## R Code: Preparation

### Installing and loading packages

Several very useful R packages will be used in this guide. These should be installed (if not done so already) and then loaded.

Additionally, some objects that will later help in theming plots and graphs are defined. For more information on colors and theming in R and ggplot2, [please see here](http://sape.inf.usi.ch/quick-reference/ggplot2/colour).

```{r}
#| include: true
#| echo: true
#| eval: true
#| label: packages

#To install the packages used in this guide, uncomment and run the lines below.
#install.packages(haven)      # For importing SPSS files into R
#install.packages(janitor)    # For cleaning/housekeeping datasets
#install.packages(dplyr)      # For wrangling and summarising datasets
#install.packages(tidyr)      # For reshaping datasets
#install.packages(ggplot2)    # For plotting and visualization
#install.packages(questionr)  # For easy frequency and descrptive tables
#install.packages(forcats)  # For working with 'factor' or categorical data

library(haven)
library(janitor)
library(dplyr)
library(tidyr)
library(questionr)
library(ggplot2)
library(forcats)

# theme colors for plots
primaryColor <- 'turquoise4'
secondaryColor <- 'wheat3'

# ggplot2 theme object for styling plots
plotTheme <-   theme_minimal() +
  theme(
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_blank(),
    text = element_text(size = 16),
    legend.position = 'bottom'
  )
```

### Importing, merging and preparing survey files

It is assumed that you have downloaded and extracted the SENS survey files into a folder called `SENS_FILES` in your local working directory. These files can now be worked with. What follows in this subsection is some basic preparation of the survey data to facilitate further analysis.

```{r}
#| label: data-import
#| warning: false
#| echo: true

# 1. import files from local directory, save as R data frames
sens_hh <- read_sav('./SENS_FILES/sens.sav')
sens_ind <- read_sav('./SENS_FILES/HHMEMBERS.sav')

# 2. add household-size categorical variable
sens_hh <- mutate(sens_hh, 
                  HHSIZE_CAT = case_when(
                    HHSIZE <= 4 ~ '1-4',
                    HHSIZE <= 6 ~ '5-6',
                    HHSIZE <= 9 ~ '7-9',
                    HHSIZE >= 10 ~ '>= 10')
                  )

# 3. Create AGEGROUP variable in the individual-level data frame

# 3a. define the age group labels at 5 year intervals
groupLabels <- c(
  paste(seq(0, 90, by = 5), seq(0 + 5 - 1, 95 - 1, by = 5), sep = "-"),
  paste('95+')
  )

# 3b. create the AGEGROUP variable by 5 year intervals and apply group labels
sens_ind$AGEGROUP <- cut(sens_ind$HHMAGE, breaks = c(seq(0, 95, by = 5), Inf),
                          labels = groupLabels, 
                          right = FALSE)

# 3c. ensure correct ordering of the age group 'levels'
sens_ind$AGEGROUP <- fct_relevel(sens_ind$AGEGROUP, 
                                 '0-4', 
                                 '5-9')

# 4. create a recoded SEX variable
sens_ind$SEX <- ifelse(sens_ind$HHMSEX == 1, 'Male', 'Female')

# 5. merge household and individual level data frames
sens_df <- left_join(sens_hh, sens_ind, by = 'interview__key')
```

In the above code, the following things take place:

1.  The survey base/household-level file and the individual-level file are imported using the `read_sav` function from the `haven` packaged and saved in R objects as *data frames*.
2.  A derived categorical variable of household size is created..
3.  A derived categorical (ordered) variable of individual age groups is created and formatted, ensuring that the order of the age group categories follows from smallest to largest.
4.  A recoded SEX variable is created to facilitate some later analysis.
5.  The household and individual level data frames are merged\*, using `dplyr`'s `left_join,` into a single data frame named `sens_df`.
    -   The joining variable is *interview\_\_key*, which is a key generated by Survey Solutions to uniquely identify interview cases. In this particular context, the *interview\_\_key* is unique at the household level, meaning that each survey household can be distinctly identified by its *interview\_\_key*.

\*For more information on merges and joins with `dplyr`, [see here](https://dplyr.tidyverse.org/reference/mutate-joins.html).

Following, we create a simple function for displaying nicely formatted tables using the `kableExtra` package. This function takes as parameters the data frame (`df`) to create the table from and the caption (`capt`) to display.

```{r}
# format a data frame using the {kableExtra} package
formattedTable <- function(df, capt){
  df |> 
    kbl(caption = capt) |> 
    kable_styling(font_size = 13, full_width = F,
                  bootstrap_options = c("hover", "condensed"))
}
```

## Module 1: Demography

### Household Response

Response rates are calculated from the consent (`MDCCONST`) variable. The function `freq` from the `questionr` package is used to produce easy frequency tables with labelled values.

The result is displayed with the help of our `formattedTable` function.

```{r}
# 1. derive frequencies
response_freq <- freq(sens_hh["MDCCONST"]) 

# 2. output the results in a formatted table
formattedTable(response_freq, 'Household Consent')

```

### Household Totals

We can also display some aggregated summaries of the surveyed population. We will call these 'Household Totals' and they are derived by aggregating and summing the demographic summary variables available from the Demography module. We recall that these variables were automatically calculated by Survey Solutions for each interviewed household.

```{r}
#| label: 'survey-totals'

# 1. summarise survey data on household totals
survey_totals <- summarise(sens_hh, 
                           `Total Surveyed` = sum(HHSIZE, na.rm = T),
                           `Total U2` = sum(TOTU2, na.rm = T),
                           `Total U5` = sum(TOTU5, na.rm = T),
                           `Total 5-14` = sum(TOT514, na.rm = T),
                           `Total 15-64` = sum(TOT1564, na.rm = T),
                           `Total 65+` = sum(TOT65OLD, na.rm = T),
                           `Total Pregnant` = sum(TOTPREG, na.rm = T))

# 2. pivot the table from wide to long format
survey_totals <- pivot_longer(survey_totals, 
                              cols = everything(),
                              names_to = "Household Totals",
                              values_to = "Result") 

# 3. output the results in a formatted table
formattedTable(survey_totals, 'Household Totals')
```

### Household Size

Using the `questionr` package, it is also easy to produce some basic frequency tables, such as household size categories using the `HHSIZE_CAT` variable created earlier.

```{r}
hh_sizecat <- questionr::freq(sens_hh$HHSIZE_CAT)
formattedTable(hh_sizecat, 'Household Size')
```

For reporting, it might be useful to create some graphs and visuals of demographic data. Below, we use the ggplot2 package to create a simple bar graph of household size frequencies.

For more information on ggplot2 and its syntax, refer to the [Data Visualization chapter](https://r4ds.had.co.nz/data-visualisation.html#data-visualisation) in R For Data Science (Wickham, 2016).

```{r, out.width='70%', fig.align='center'}
# bar chart of household size frequencies
ggplot(data = sens_hh, aes(HHSIZE_CAT)) +
  geom_bar(fill = primaryColor) + 
  labs(x = 'Household Size', y = 'Count', title = 'Frequency of household size') +
  plotTheme


```

### Population Pyramid

We can also create a typical population pyramid. To do this, we first derive a data frame that groups data by sex and age group. Because of how `ggplot2` renders the data, we also make the male population figures negative, so that the male pyramid bars go to side opposite of the female pyramid bars.

Thereafter, a somewhat complex `ggplot` function call is made to create the pyramid. Essentially, we are modifying a bar graph and applying some tricks to create the pyramid.

```{r, out.width='70%', fig.align='center'}

# 1. derive age group populations by sex
agegroups <- sens_ind |> 
  group_by(SEX, AGEGROUP) |> 
  summarise(POPULATION = n(), .groups = 'drop') |> 
  mutate(POPULATION = ifelse(SEX == 'Male', POPULATION * -1, POPULATION))

# 2. create population pyramid
ggplot(data = agegroups, aes(x = AGEGROUP, y = POPULATION, fill = SEX)) +
  geom_bar(stat='identity') + 
  scale_fill_manual(values=c(primaryColor, secondaryColor)) +
  scale_y_continuous(labels = ~ ifelse(.x < 0, .x * -1, .x)) +
  coord_flip() +    
  labs(title = 'Population Pyramid') +
  guides(fill = guide_legend(reverse = T)) +
  plotTheme 
```
